package com.example.clientesimport android.app.Dialogimport android.content.DialogInterfaceimport android.os.Bundleimport android.util.Logimport android.widget.Buttonimport android.widget.TextViewimport androidx.appcompat.app.AlertDialogimport androidx.appcompat.app.AppCompatActivityimport com.example.clientes.model.ClienteItemimport com.example.clientes.model.Res_Dataimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport retrofit2.Retrofitimport retrofit2.converter.gson.GsonConverterFactoryclass perfilCliente : AppCompatActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        val id :Int = intent.getIntExtra("idCliente", 0)        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        getDataProveedor(id)        findViewById<Button>(R.id.delete).setOnClickListener {            getDataDelete(id)        }    }    private fun getDataDelete(id: Int) {        val retrofitBuilder = Retrofit.Builder()            .addConverterFactory(GsonConverterFactory.create())            .baseUrl(Base_URl)            .build()            .create(APIService::class.java)        val retrofitData = retrofitBuilder.getDataDelete(id)        retrofitData.enqueue(object : Callback<Res_Data> {            override fun onResponse(                call: Call<Res_Data>?,                response: Response<Res_Data>?            ) {                val responseBody = response?.body()!!                AlertDialog.Builder(this@perfilCliente).apply {                    setTitle("Alert")                    setMessage(responseBody.message)                        .setNegativeButton(android.R.string.ok,                            DialogInterface.OnClickListener { dialog, which ->                                //bot√≥n cancel pulsado                            })                        .show()                }            }            override fun onFailure(call: Call<Res_Data>?, t: Throwable) {                Log.d("MainActivity", "onFailure" + t.message)            }        })    }    private fun getDataProveedor(id:Int) {        val retrofitBuilder = Retrofit.Builder()            .addConverterFactory(GsonConverterFactory.create())            .baseUrl(Base_URl)            .build()            .create(APIService::class.java)        val retrofitData = retrofitBuilder.getDataid(id)        retrofitData.enqueue(object : Callback<ClienteItem> {            override fun onResponse(                call: Call<ClienteItem>?,                response: Response<ClienteItem>?            ) {                val responseBody = response?.body()!!                findViewById<TextView>(R.id.Campo_Nombre).setText(responseBody.nombre)                findViewById<TextView>(R.id.appPa).setText(responseBody.apellidoP)                findViewById<TextView>(R.id.appMa).setText(responseBody.apellidoM)                findViewById<TextView>(R.id.Address).setText(responseBody.email)                findViewById<TextView>(R.id.editTextPhone).setText(responseBody.telefono.toString())            }            override fun onFailure(call: Call<ClienteItem>?, t: Throwable) {                Log.d("MainActivity", "onFailure" + t.message)            }        })    }}